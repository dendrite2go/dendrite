// Code generated by protoc-gen-go. DO NOT EDIT.
// source: query.proto

package axon_server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Message containing Query related instructions for Axon Server
type QueryProviderOutbound struct {
	// The actual instruction to send
	//
	// Types that are valid to be assigned to Request:
	//	*QueryProviderOutbound_Subscribe
	//	*QueryProviderOutbound_Unsubscribe
	//	*QueryProviderOutbound_FlowControl
	//	*QueryProviderOutbound_QueryResponse
	//	*QueryProviderOutbound_QueryComplete
	//	*QueryProviderOutbound_SubscriptionQueryResponse
	//	*QueryProviderOutbound_Ack
	Request isQueryProviderOutbound_Request `protobuf_oneof:"request"`
	// Instruction identifier. If this identifier is set, this instruction will be acknowledged via inbound stream
	InstructionId        string   `protobuf:"bytes,8,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryProviderOutbound) Reset()         { *m = QueryProviderOutbound{} }
func (m *QueryProviderOutbound) String() string { return proto.CompactTextString(m) }
func (*QueryProviderOutbound) ProtoMessage()    {}
func (*QueryProviderOutbound) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{0}
}

func (m *QueryProviderOutbound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProviderOutbound.Unmarshal(m, b)
}
func (m *QueryProviderOutbound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProviderOutbound.Marshal(b, m, deterministic)
}
func (m *QueryProviderOutbound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderOutbound.Merge(m, src)
}
func (m *QueryProviderOutbound) XXX_Size() int {
	return xxx_messageInfo_QueryProviderOutbound.Size(m)
}
func (m *QueryProviderOutbound) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderOutbound.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderOutbound proto.InternalMessageInfo

type isQueryProviderOutbound_Request interface {
	isQueryProviderOutbound_Request()
}

type QueryProviderOutbound_Subscribe struct {
	Subscribe *QuerySubscription `protobuf:"bytes,1,opt,name=subscribe,proto3,oneof"`
}

type QueryProviderOutbound_Unsubscribe struct {
	Unsubscribe *QuerySubscription `protobuf:"bytes,2,opt,name=unsubscribe,proto3,oneof"`
}

type QueryProviderOutbound_FlowControl struct {
	FlowControl *FlowControl `protobuf:"bytes,3,opt,name=flow_control,json=flowControl,proto3,oneof"`
}

type QueryProviderOutbound_QueryResponse struct {
	QueryResponse *QueryResponse `protobuf:"bytes,4,opt,name=query_response,json=queryResponse,proto3,oneof"`
}

type QueryProviderOutbound_QueryComplete struct {
	QueryComplete *QueryComplete `protobuf:"bytes,5,opt,name=query_complete,json=queryComplete,proto3,oneof"`
}

type QueryProviderOutbound_SubscriptionQueryResponse struct {
	SubscriptionQueryResponse *SubscriptionQueryResponse `protobuf:"bytes,6,opt,name=subscription_query_response,json=subscriptionQueryResponse,proto3,oneof"`
}

type QueryProviderOutbound_Ack struct {
	Ack *InstructionAck `protobuf:"bytes,7,opt,name=ack,proto3,oneof"`
}

func (*QueryProviderOutbound_Subscribe) isQueryProviderOutbound_Request() {}

func (*QueryProviderOutbound_Unsubscribe) isQueryProviderOutbound_Request() {}

func (*QueryProviderOutbound_FlowControl) isQueryProviderOutbound_Request() {}

func (*QueryProviderOutbound_QueryResponse) isQueryProviderOutbound_Request() {}

func (*QueryProviderOutbound_QueryComplete) isQueryProviderOutbound_Request() {}

func (*QueryProviderOutbound_SubscriptionQueryResponse) isQueryProviderOutbound_Request() {}

func (*QueryProviderOutbound_Ack) isQueryProviderOutbound_Request() {}

func (m *QueryProviderOutbound) GetRequest() isQueryProviderOutbound_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *QueryProviderOutbound) GetSubscribe() *QuerySubscription {
	if x, ok := m.GetRequest().(*QueryProviderOutbound_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (m *QueryProviderOutbound) GetUnsubscribe() *QuerySubscription {
	if x, ok := m.GetRequest().(*QueryProviderOutbound_Unsubscribe); ok {
		return x.Unsubscribe
	}
	return nil
}

func (m *QueryProviderOutbound) GetFlowControl() *FlowControl {
	if x, ok := m.GetRequest().(*QueryProviderOutbound_FlowControl); ok {
		return x.FlowControl
	}
	return nil
}

func (m *QueryProviderOutbound) GetQueryResponse() *QueryResponse {
	if x, ok := m.GetRequest().(*QueryProviderOutbound_QueryResponse); ok {
		return x.QueryResponse
	}
	return nil
}

func (m *QueryProviderOutbound) GetQueryComplete() *QueryComplete {
	if x, ok := m.GetRequest().(*QueryProviderOutbound_QueryComplete); ok {
		return x.QueryComplete
	}
	return nil
}

func (m *QueryProviderOutbound) GetSubscriptionQueryResponse() *SubscriptionQueryResponse {
	if x, ok := m.GetRequest().(*QueryProviderOutbound_SubscriptionQueryResponse); ok {
		return x.SubscriptionQueryResponse
	}
	return nil
}

func (m *QueryProviderOutbound) GetAck() *InstructionAck {
	if x, ok := m.GetRequest().(*QueryProviderOutbound_Ack); ok {
		return x.Ack
	}
	return nil
}

func (m *QueryProviderOutbound) GetInstructionId() string {
	if m != nil {
		return m.InstructionId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryProviderOutbound) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryProviderOutbound_Subscribe)(nil),
		(*QueryProviderOutbound_Unsubscribe)(nil),
		(*QueryProviderOutbound_FlowControl)(nil),
		(*QueryProviderOutbound_QueryResponse)(nil),
		(*QueryProviderOutbound_QueryComplete)(nil),
		(*QueryProviderOutbound_SubscriptionQueryResponse)(nil),
		(*QueryProviderOutbound_Ack)(nil),
	}
}

// Queries or Query related instructions from AxonServer for the connected application
type QueryProviderInbound struct {
	// The actual query or instruction
	//
	// Types that are valid to be assigned to Request:
	//	*QueryProviderInbound_Ack
	//	*QueryProviderInbound_Query
	//	*QueryProviderInbound_SubscriptionQueryRequest
	Request isQueryProviderInbound_Request `protobuf_oneof:"request"`
	// Instruction identifier. If this identifier is set, this instruction will be acknowledged via outbound stream
	InstructionId        string   `protobuf:"bytes,4,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryProviderInbound) Reset()         { *m = QueryProviderInbound{} }
func (m *QueryProviderInbound) String() string { return proto.CompactTextString(m) }
func (*QueryProviderInbound) ProtoMessage()    {}
func (*QueryProviderInbound) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{1}
}

func (m *QueryProviderInbound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryProviderInbound.Unmarshal(m, b)
}
func (m *QueryProviderInbound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryProviderInbound.Marshal(b, m, deterministic)
}
func (m *QueryProviderInbound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderInbound.Merge(m, src)
}
func (m *QueryProviderInbound) XXX_Size() int {
	return xxx_messageInfo_QueryProviderInbound.Size(m)
}
func (m *QueryProviderInbound) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderInbound.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderInbound proto.InternalMessageInfo

type isQueryProviderInbound_Request interface {
	isQueryProviderInbound_Request()
}

type QueryProviderInbound_Ack struct {
	Ack *InstructionAck `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type QueryProviderInbound_Query struct {
	Query *QueryRequest `protobuf:"bytes,2,opt,name=query,proto3,oneof"`
}

type QueryProviderInbound_SubscriptionQueryRequest struct {
	SubscriptionQueryRequest *SubscriptionQueryRequest `protobuf:"bytes,3,opt,name=subscription_query_request,json=subscriptionQueryRequest,proto3,oneof"`
}

func (*QueryProviderInbound_Ack) isQueryProviderInbound_Request() {}

func (*QueryProviderInbound_Query) isQueryProviderInbound_Request() {}

func (*QueryProviderInbound_SubscriptionQueryRequest) isQueryProviderInbound_Request() {}

func (m *QueryProviderInbound) GetRequest() isQueryProviderInbound_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *QueryProviderInbound) GetAck() *InstructionAck {
	if x, ok := m.GetRequest().(*QueryProviderInbound_Ack); ok {
		return x.Ack
	}
	return nil
}

func (m *QueryProviderInbound) GetQuery() *QueryRequest {
	if x, ok := m.GetRequest().(*QueryProviderInbound_Query); ok {
		return x.Query
	}
	return nil
}

func (m *QueryProviderInbound) GetSubscriptionQueryRequest() *SubscriptionQueryRequest {
	if x, ok := m.GetRequest().(*QueryProviderInbound_SubscriptionQueryRequest); ok {
		return x.SubscriptionQueryRequest
	}
	return nil
}

func (m *QueryProviderInbound) GetInstructionId() string {
	if m != nil {
		return m.InstructionId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryProviderInbound) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryProviderInbound_Ack)(nil),
		(*QueryProviderInbound_Query)(nil),
		(*QueryProviderInbound_SubscriptionQueryRequest)(nil),
	}
}

// Message indicating that all available responses to an incoming Query have been provided.
type QueryComplete struct {
	// A unique identifier for this message
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The identifier of the incoming query to complete
	RequestId            string   `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryComplete) Reset()         { *m = QueryComplete{} }
func (m *QueryComplete) String() string { return proto.CompactTextString(m) }
func (*QueryComplete) ProtoMessage()    {}
func (*QueryComplete) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{2}
}

func (m *QueryComplete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryComplete.Unmarshal(m, b)
}
func (m *QueryComplete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryComplete.Marshal(b, m, deterministic)
}
func (m *QueryComplete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryComplete.Merge(m, src)
}
func (m *QueryComplete) XXX_Size() int {
	return xxx_messageInfo_QueryComplete.Size(m)
}
func (m *QueryComplete) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryComplete.DiscardUnknown(m)
}

var xxx_messageInfo_QueryComplete proto.InternalMessageInfo

func (m *QueryComplete) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *QueryComplete) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Message representing an incoming Query
type QueryRequest struct {
	// The message ID of the incoming Query
	MessageIdentifier string `protobuf:"bytes,1,opt,name=message_identifier,json=messageIdentifier,proto3" json:"message_identifier,omitempty"`
	// The name of the Query to execute
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// The timestamp of the Query creation
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// A payload accompanying the Query
	Payload *SerializedObject `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// Meta Data providing contextual information of the Query
	MetaData map[string]*MetaDataValue `protobuf:"bytes,5,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// An object describing the expectations of the Response Type
	ResponseType *SerializedObject `protobuf:"bytes,6,opt,name=response_type,json=responseType,proto3" json:"response_type,omitempty"`
	// Any instructions for components Routing or Handling the Query
	ProcessingInstructions []*ProcessingInstruction `protobuf:"bytes,7,rep,name=processing_instructions,json=processingInstructions,proto3" json:"processing_instructions,omitempty"`
	// The unique identifier of the client instance dispatching the query
	ClientId string `protobuf:"bytes,8,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The Name of the Component dispatching the query
	ComponentName        string   `protobuf:"bytes,9,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{3}
}

func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetMessageIdentifier() string {
	if m != nil {
		return m.MessageIdentifier
	}
	return ""
}

func (m *QueryRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *QueryRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *QueryRequest) GetPayload() *SerializedObject {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *QueryRequest) GetMetaData() map[string]*MetaDataValue {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *QueryRequest) GetResponseType() *SerializedObject {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (m *QueryRequest) GetProcessingInstructions() []*ProcessingInstruction {
	if m != nil {
		return m.ProcessingInstructions
	}
	return nil
}

func (m *QueryRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *QueryRequest) GetComponentName() string {
	if m != nil {
		return m.ComponentName
	}
	return ""
}

// Message that represents the Response to a Query
type QueryResponse struct {
	// The unique identifier of the Response Message
	MessageIdentifier string `protobuf:"bytes,1,opt,name=message_identifier,json=messageIdentifier,proto3" json:"message_identifier,omitempty"`
	// An Error Code identifying the type of error, if any
	ErrorCode string `protobuf:"bytes,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// A detailed description of the error, if any
	ErrorMessage *ErrorMessage `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The Payload of the Response Message
	Payload *SerializedObject `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// Any Meta Data describing the context of the Response Message
	MetaData map[string]*MetaDataValue `protobuf:"bytes,5,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Any instructions for components Routing or Handling the Response Message
	ProcessingInstructions []*ProcessingInstruction `protobuf:"bytes,6,rep,name=processing_instructions,json=processingInstructions,proto3" json:"processing_instructions,omitempty"`
	// The unique identifier of the Query to which this is a response
	RequestIdentifier    string   `protobuf:"bytes,7,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{4}
}

func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse.Unmarshal(m, b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return xxx_messageInfo_QueryResponse.Size(m)
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetMessageIdentifier() string {
	if m != nil {
		return m.MessageIdentifier
	}
	return ""
}

func (m *QueryResponse) GetErrorCode() string {
	if m != nil {
		return m.ErrorCode
	}
	return ""
}

func (m *QueryResponse) GetErrorMessage() *ErrorMessage {
	if m != nil {
		return m.ErrorMessage
	}
	return nil
}

func (m *QueryResponse) GetPayload() *SerializedObject {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *QueryResponse) GetMetaData() map[string]*MetaDataValue {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *QueryResponse) GetProcessingInstructions() []*ProcessingInstruction {
	if m != nil {
		return m.ProcessingInstructions
	}
	return nil
}

func (m *QueryResponse) GetRequestIdentifier() string {
	if m != nil {
		return m.RequestIdentifier
	}
	return ""
}

// Message that represents a Subscription Query
type SubscriptionQuery struct {
	// A unique identifier for this subscription
	SubscriptionIdentifier string `protobuf:"bytes,1,opt,name=subscription_identifier,json=subscriptionIdentifier,proto3" json:"subscription_identifier,omitempty"`
	// The number of messages the Server may send before needing to await additional permits
	NumberOfPermits int64 `protobuf:"varint,2,opt,name=number_of_permits,json=numberOfPermits,proto3" json:"number_of_permits,omitempty"`
	// The Query describing the desire for information
	QueryRequest *QueryRequest `protobuf:"bytes,3,opt,name=query_request,json=queryRequest,proto3" json:"query_request,omitempty"`
	// A description of the type of Object expected as Update Responses
	UpdateResponseType   *SerializedObject `protobuf:"bytes,4,opt,name=update_response_type,json=updateResponseType,proto3" json:"update_response_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubscriptionQuery) Reset()         { *m = SubscriptionQuery{} }
func (m *SubscriptionQuery) String() string { return proto.CompactTextString(m) }
func (*SubscriptionQuery) ProtoMessage()    {}
func (*SubscriptionQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{5}
}

func (m *SubscriptionQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionQuery.Unmarshal(m, b)
}
func (m *SubscriptionQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionQuery.Marshal(b, m, deterministic)
}
func (m *SubscriptionQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionQuery.Merge(m, src)
}
func (m *SubscriptionQuery) XXX_Size() int {
	return xxx_messageInfo_SubscriptionQuery.Size(m)
}
func (m *SubscriptionQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionQuery.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionQuery proto.InternalMessageInfo

func (m *SubscriptionQuery) GetSubscriptionIdentifier() string {
	if m != nil {
		return m.SubscriptionIdentifier
	}
	return ""
}

func (m *SubscriptionQuery) GetNumberOfPermits() int64 {
	if m != nil {
		return m.NumberOfPermits
	}
	return 0
}

func (m *SubscriptionQuery) GetQueryRequest() *QueryRequest {
	if m != nil {
		return m.QueryRequest
	}
	return nil
}

func (m *SubscriptionQuery) GetUpdateResponseType() *SerializedObject {
	if m != nil {
		return m.UpdateResponseType
	}
	return nil
}

// A message containing an Update of a Query Subscription Response
type QueryUpdate struct {
	// The unique identifier of this Update
	MessageIdentifier string `protobuf:"bytes,2,opt,name=message_identifier,json=messageIdentifier,proto3" json:"message_identifier,omitempty"`
	// The object representing the Update
	Payload *SerializedObject `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// Meta Data providing contextual information of the Update
	MetaData map[string]*MetaDataValue `protobuf:"bytes,4,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The identifier of the Client instance providing the Update
	ClientId string `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The Component Name of the Client providing the Update
	ComponentName        string   `protobuf:"bytes,6,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryUpdate) Reset()         { *m = QueryUpdate{} }
func (m *QueryUpdate) String() string { return proto.CompactTextString(m) }
func (*QueryUpdate) ProtoMessage()    {}
func (*QueryUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{6}
}

func (m *QueryUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryUpdate.Unmarshal(m, b)
}
func (m *QueryUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryUpdate.Marshal(b, m, deterministic)
}
func (m *QueryUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpdate.Merge(m, src)
}
func (m *QueryUpdate) XXX_Size() int {
	return xxx_messageInfo_QueryUpdate.Size(m)
}
func (m *QueryUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpdate proto.InternalMessageInfo

func (m *QueryUpdate) GetMessageIdentifier() string {
	if m != nil {
		return m.MessageIdentifier
	}
	return ""
}

func (m *QueryUpdate) GetPayload() *SerializedObject {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *QueryUpdate) GetMetaData() map[string]*MetaDataValue {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *QueryUpdate) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *QueryUpdate) GetComponentName() string {
	if m != nil {
		return m.ComponentName
	}
	return ""
}

// Message indicating that all relevant Updates have been sent for a Subscription Query, and that no further Updates are available
type QueryUpdateComplete struct {
	// The identifier of the Client instance providing the Update
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The Component Name of the Client providing the Update
	ComponentName        string   `protobuf:"bytes,3,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryUpdateComplete) Reset()         { *m = QueryUpdateComplete{} }
func (m *QueryUpdateComplete) String() string { return proto.CompactTextString(m) }
func (*QueryUpdateComplete) ProtoMessage()    {}
func (*QueryUpdateComplete) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{7}
}

func (m *QueryUpdateComplete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryUpdateComplete.Unmarshal(m, b)
}
func (m *QueryUpdateComplete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryUpdateComplete.Marshal(b, m, deterministic)
}
func (m *QueryUpdateComplete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpdateComplete.Merge(m, src)
}
func (m *QueryUpdateComplete) XXX_Size() int {
	return xxx_messageInfo_QueryUpdateComplete.Size(m)
}
func (m *QueryUpdateComplete) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpdateComplete.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpdateComplete proto.InternalMessageInfo

func (m *QueryUpdateComplete) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *QueryUpdateComplete) GetComponentName() string {
	if m != nil {
		return m.ComponentName
	}
	return ""
}

// Message indicating that an Error occurred and that no Updates will be sent for a Subscription Query
type QueryUpdateCompleteExceptionally struct {
	// The identifier of the Client instance providing the Update
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The Component Name of the Client providing the Update
	ComponentName string `protobuf:"bytes,3,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// The Code describing the type of Error that occurred
	ErrorCode string `protobuf:"bytes,5,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// A detailed description of the error, if available
	ErrorMessage         *ErrorMessage `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *QueryUpdateCompleteExceptionally) Reset()         { *m = QueryUpdateCompleteExceptionally{} }
func (m *QueryUpdateCompleteExceptionally) String() string { return proto.CompactTextString(m) }
func (*QueryUpdateCompleteExceptionally) ProtoMessage()    {}
func (*QueryUpdateCompleteExceptionally) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{8}
}

func (m *QueryUpdateCompleteExceptionally) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryUpdateCompleteExceptionally.Unmarshal(m, b)
}
func (m *QueryUpdateCompleteExceptionally) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryUpdateCompleteExceptionally.Marshal(b, m, deterministic)
}
func (m *QueryUpdateCompleteExceptionally) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUpdateCompleteExceptionally.Merge(m, src)
}
func (m *QueryUpdateCompleteExceptionally) XXX_Size() int {
	return xxx_messageInfo_QueryUpdateCompleteExceptionally.Size(m)
}
func (m *QueryUpdateCompleteExceptionally) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUpdateCompleteExceptionally.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUpdateCompleteExceptionally proto.InternalMessageInfo

func (m *QueryUpdateCompleteExceptionally) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *QueryUpdateCompleteExceptionally) GetComponentName() string {
	if m != nil {
		return m.ComponentName
	}
	return ""
}

func (m *QueryUpdateCompleteExceptionally) GetErrorCode() string {
	if m != nil {
		return m.ErrorCode
	}
	return ""
}

func (m *QueryUpdateCompleteExceptionally) GetErrorMessage() *ErrorMessage {
	if m != nil {
		return m.ErrorMessage
	}
	return nil
}

// Message describing possible interactions for a Subscription Query
type SubscriptionQueryRequest struct {
	// The actual request. The Subscription Query is opened using a `subscribe`, which opens the flow of updates. Once
	//successful, the `get_initial_result` retrieves the initial result of the subscription. For the server to send
	//more updates than the initial number of permits, use the `flow_control` request to send more permits.
	//
	// Types that are valid to be assigned to Request:
	//	*SubscriptionQueryRequest_Subscribe
	//	*SubscriptionQueryRequest_Unsubscribe
	//	*SubscriptionQueryRequest_GetInitialResult
	//	*SubscriptionQueryRequest_FlowControl
	Request              isSubscriptionQueryRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *SubscriptionQueryRequest) Reset()         { *m = SubscriptionQueryRequest{} }
func (m *SubscriptionQueryRequest) String() string { return proto.CompactTextString(m) }
func (*SubscriptionQueryRequest) ProtoMessage()    {}
func (*SubscriptionQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{9}
}

func (m *SubscriptionQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionQueryRequest.Unmarshal(m, b)
}
func (m *SubscriptionQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionQueryRequest.Marshal(b, m, deterministic)
}
func (m *SubscriptionQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionQueryRequest.Merge(m, src)
}
func (m *SubscriptionQueryRequest) XXX_Size() int {
	return xxx_messageInfo_SubscriptionQueryRequest.Size(m)
}
func (m *SubscriptionQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionQueryRequest proto.InternalMessageInfo

type isSubscriptionQueryRequest_Request interface {
	isSubscriptionQueryRequest_Request()
}

type SubscriptionQueryRequest_Subscribe struct {
	Subscribe *SubscriptionQuery `protobuf:"bytes,1,opt,name=subscribe,proto3,oneof"`
}

type SubscriptionQueryRequest_Unsubscribe struct {
	Unsubscribe *SubscriptionQuery `protobuf:"bytes,2,opt,name=unsubscribe,proto3,oneof"`
}

type SubscriptionQueryRequest_GetInitialResult struct {
	GetInitialResult *SubscriptionQuery `protobuf:"bytes,3,opt,name=get_initial_result,json=getInitialResult,proto3,oneof"`
}

type SubscriptionQueryRequest_FlowControl struct {
	FlowControl *SubscriptionQuery `protobuf:"bytes,4,opt,name=flow_control,json=flowControl,proto3,oneof"`
}

func (*SubscriptionQueryRequest_Subscribe) isSubscriptionQueryRequest_Request() {}

func (*SubscriptionQueryRequest_Unsubscribe) isSubscriptionQueryRequest_Request() {}

func (*SubscriptionQueryRequest_GetInitialResult) isSubscriptionQueryRequest_Request() {}

func (*SubscriptionQueryRequest_FlowControl) isSubscriptionQueryRequest_Request() {}

func (m *SubscriptionQueryRequest) GetRequest() isSubscriptionQueryRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SubscriptionQueryRequest) GetSubscribe() *SubscriptionQuery {
	if x, ok := m.GetRequest().(*SubscriptionQueryRequest_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (m *SubscriptionQueryRequest) GetUnsubscribe() *SubscriptionQuery {
	if x, ok := m.GetRequest().(*SubscriptionQueryRequest_Unsubscribe); ok {
		return x.Unsubscribe
	}
	return nil
}

func (m *SubscriptionQueryRequest) GetGetInitialResult() *SubscriptionQuery {
	if x, ok := m.GetRequest().(*SubscriptionQueryRequest_GetInitialResult); ok {
		return x.GetInitialResult
	}
	return nil
}

func (m *SubscriptionQueryRequest) GetFlowControl() *SubscriptionQuery {
	if x, ok := m.GetRequest().(*SubscriptionQueryRequest_FlowControl); ok {
		return x.FlowControl
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubscriptionQueryRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubscriptionQueryRequest_Subscribe)(nil),
		(*SubscriptionQueryRequest_Unsubscribe)(nil),
		(*SubscriptionQueryRequest_GetInitialResult)(nil),
		(*SubscriptionQueryRequest_FlowControl)(nil),
	}
}

// Represents a Response Message for a Subscription Query
type SubscriptionQueryResponse struct {
	// The unique identifier for this message
	MessageIdentifier string `protobuf:"bytes,1,opt,name=message_identifier,json=messageIdentifier,proto3" json:"message_identifier,omitempty"`
	// The identifier of the subscription query this is a response for
	SubscriptionIdentifier string `protobuf:"bytes,2,opt,name=subscription_identifier,json=subscriptionIdentifier,proto3" json:"subscription_identifier,omitempty"`
	// The actual response. The `initial_result` message is sent as a response to `get_initial_result`. An `update`
	//messages is sent for each update available for the query, even before the Initial Result is supplied. The
	//`complete` or `complete_exceptionally` are sent when the publishing side completed the Subscription Query,
	//either regularly (`complete`) or because an error occurred (`complete_exceptionally`).
	//
	// Types that are valid to be assigned to Response:
	//	*SubscriptionQueryResponse_InitialResult
	//	*SubscriptionQueryResponse_Update
	//	*SubscriptionQueryResponse_Complete
	//	*SubscriptionQueryResponse_CompleteExceptionally
	Response             isSubscriptionQueryResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *SubscriptionQueryResponse) Reset()         { *m = SubscriptionQueryResponse{} }
func (m *SubscriptionQueryResponse) String() string { return proto.CompactTextString(m) }
func (*SubscriptionQueryResponse) ProtoMessage()    {}
func (*SubscriptionQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{10}
}

func (m *SubscriptionQueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionQueryResponse.Unmarshal(m, b)
}
func (m *SubscriptionQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionQueryResponse.Marshal(b, m, deterministic)
}
func (m *SubscriptionQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionQueryResponse.Merge(m, src)
}
func (m *SubscriptionQueryResponse) XXX_Size() int {
	return xxx_messageInfo_SubscriptionQueryResponse.Size(m)
}
func (m *SubscriptionQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionQueryResponse proto.InternalMessageInfo

func (m *SubscriptionQueryResponse) GetMessageIdentifier() string {
	if m != nil {
		return m.MessageIdentifier
	}
	return ""
}

func (m *SubscriptionQueryResponse) GetSubscriptionIdentifier() string {
	if m != nil {
		return m.SubscriptionIdentifier
	}
	return ""
}

type isSubscriptionQueryResponse_Response interface {
	isSubscriptionQueryResponse_Response()
}

type SubscriptionQueryResponse_InitialResult struct {
	InitialResult *QueryResponse `protobuf:"bytes,3,opt,name=initial_result,json=initialResult,proto3,oneof"`
}

type SubscriptionQueryResponse_Update struct {
	Update *QueryUpdate `protobuf:"bytes,4,opt,name=update,proto3,oneof"`
}

type SubscriptionQueryResponse_Complete struct {
	Complete *QueryUpdateComplete `protobuf:"bytes,5,opt,name=complete,proto3,oneof"`
}

type SubscriptionQueryResponse_CompleteExceptionally struct {
	CompleteExceptionally *QueryUpdateCompleteExceptionally `protobuf:"bytes,6,opt,name=complete_exceptionally,json=completeExceptionally,proto3,oneof"`
}

func (*SubscriptionQueryResponse_InitialResult) isSubscriptionQueryResponse_Response() {}

func (*SubscriptionQueryResponse_Update) isSubscriptionQueryResponse_Response() {}

func (*SubscriptionQueryResponse_Complete) isSubscriptionQueryResponse_Response() {}

func (*SubscriptionQueryResponse_CompleteExceptionally) isSubscriptionQueryResponse_Response() {}

func (m *SubscriptionQueryResponse) GetResponse() isSubscriptionQueryResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SubscriptionQueryResponse) GetInitialResult() *QueryResponse {
	if x, ok := m.GetResponse().(*SubscriptionQueryResponse_InitialResult); ok {
		return x.InitialResult
	}
	return nil
}

func (m *SubscriptionQueryResponse) GetUpdate() *QueryUpdate {
	if x, ok := m.GetResponse().(*SubscriptionQueryResponse_Update); ok {
		return x.Update
	}
	return nil
}

func (m *SubscriptionQueryResponse) GetComplete() *QueryUpdateComplete {
	if x, ok := m.GetResponse().(*SubscriptionQueryResponse_Complete); ok {
		return x.Complete
	}
	return nil
}

func (m *SubscriptionQueryResponse) GetCompleteExceptionally() *QueryUpdateCompleteExceptionally {
	if x, ok := m.GetResponse().(*SubscriptionQueryResponse_CompleteExceptionally); ok {
		return x.CompleteExceptionally
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubscriptionQueryResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubscriptionQueryResponse_InitialResult)(nil),
		(*SubscriptionQueryResponse_Update)(nil),
		(*SubscriptionQueryResponse_Complete)(nil),
		(*SubscriptionQueryResponse_CompleteExceptionally)(nil),
	}
}

// Message containing details of a Registration of a Query Handler in a component
type QuerySubscription struct {
	// The unique identifier of this Message
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The name of the Query the Handler is subscribed to
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// The type of Result this Handler produces
	ResultName string `protobuf:"bytes,3,opt,name=result_name,json=resultName,proto3" json:"result_name,omitempty"`
	// The name of the Component containing the Query Handler
	ComponentName string `protobuf:"bytes,4,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// The unique identifier of the Client Instance containing the Query Handler
	ClientId string `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The number of Query Handlers registered within this Component with the same details. This number is used to
	//calculate the number of candidates for Scatter-Gather Queries.
	NrOfHandlers         int32    `protobuf:"varint,6,opt,name=nr_of_handlers,json=nrOfHandlers,proto3" json:"nr_of_handlers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuerySubscription) Reset()         { *m = QuerySubscription{} }
func (m *QuerySubscription) String() string { return proto.CompactTextString(m) }
func (*QuerySubscription) ProtoMessage()    {}
func (*QuerySubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c6ac9b241082464, []int{11}
}

func (m *QuerySubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySubscription.Unmarshal(m, b)
}
func (m *QuerySubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySubscription.Marshal(b, m, deterministic)
}
func (m *QuerySubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscription.Merge(m, src)
}
func (m *QuerySubscription) XXX_Size() int {
	return xxx_messageInfo_QuerySubscription.Size(m)
}
func (m *QuerySubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscription.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscription proto.InternalMessageInfo

func (m *QuerySubscription) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *QuerySubscription) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *QuerySubscription) GetResultName() string {
	if m != nil {
		return m.ResultName
	}
	return ""
}

func (m *QuerySubscription) GetComponentName() string {
	if m != nil {
		return m.ComponentName
	}
	return ""
}

func (m *QuerySubscription) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *QuerySubscription) GetNrOfHandlers() int32 {
	if m != nil {
		return m.NrOfHandlers
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryProviderOutbound)(nil), "io.axoniq.axonserver.grpc.query.QueryProviderOutbound")
	proto.RegisterType((*QueryProviderInbound)(nil), "io.axoniq.axonserver.grpc.query.QueryProviderInbound")
	proto.RegisterType((*QueryComplete)(nil), "io.axoniq.axonserver.grpc.query.QueryComplete")
	proto.RegisterType((*QueryRequest)(nil), "io.axoniq.axonserver.grpc.query.QueryRequest")
	proto.RegisterMapType((map[string]*MetaDataValue)(nil), "io.axoniq.axonserver.grpc.query.QueryRequest.MetaDataEntry")
	proto.RegisterType((*QueryResponse)(nil), "io.axoniq.axonserver.grpc.query.QueryResponse")
	proto.RegisterMapType((map[string]*MetaDataValue)(nil), "io.axoniq.axonserver.grpc.query.QueryResponse.MetaDataEntry")
	proto.RegisterType((*SubscriptionQuery)(nil), "io.axoniq.axonserver.grpc.query.SubscriptionQuery")
	proto.RegisterType((*QueryUpdate)(nil), "io.axoniq.axonserver.grpc.query.QueryUpdate")
	proto.RegisterMapType((map[string]*MetaDataValue)(nil), "io.axoniq.axonserver.grpc.query.QueryUpdate.MetaDataEntry")
	proto.RegisterType((*QueryUpdateComplete)(nil), "io.axoniq.axonserver.grpc.query.QueryUpdateComplete")
	proto.RegisterType((*QueryUpdateCompleteExceptionally)(nil), "io.axoniq.axonserver.grpc.query.QueryUpdateCompleteExceptionally")
	proto.RegisterType((*SubscriptionQueryRequest)(nil), "io.axoniq.axonserver.grpc.query.SubscriptionQueryRequest")
	proto.RegisterType((*SubscriptionQueryResponse)(nil), "io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse")
	proto.RegisterType((*QuerySubscription)(nil), "io.axoniq.axonserver.grpc.query.QuerySubscription")
}

func init() {
	proto.RegisterFile("query.proto", fileDescriptor_5c6ac9b241082464)
}

var fileDescriptor_5c6ac9b241082464 = []byte{
	// 1239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x5b, 0x73, 0xdb, 0x44,
	0x14, 0xb6, 0x7c, 0x8b, 0x7d, 0x6c, 0xb7, 0xc9, 0xd2, 0xa6, 0xaa, 0xdb, 0x4e, 0x33, 0x1e, 0x2e,
	0xe1, 0x12, 0x27, 0x13, 0xee, 0xe1, 0x32, 0xd3, 0x84, 0x74, 0x6c, 0x20, 0x24, 0x6c, 0xa0, 0xa1,
	0xcc, 0x30, 0x1a, 0x59, 0x5a, 0x1b, 0x35, 0xba, 0x65, 0xb5, 0x4e, 0xeb, 0x0e, 0x0f, 0xf0, 0xc4,
	0x03, 0x0c, 0x7f, 0x84, 0x27, 0x7e, 0x06, 0xcf, 0xf0, 0x6b, 0x78, 0x62, 0xb4, 0x2b, 0xd9, 0x92,
	0x2d, 0xdb, 0x91, 0x93, 0x81, 0xa7, 0xc4, 0xe7, 0xec, 0xf9, 0xf6, 0xe8, 0xec, 0x77, 0xbe, 0xd5,
	0x11, 0x54, 0xce, 0xfa, 0x84, 0x0e, 0x9a, 0x2e, 0x75, 0x98, 0x83, 0xee, 0x1b, 0x4e, 0x53, 0x7d,
	0xe6, 0xd8, 0xc6, 0x19, 0xff, 0xe3, 0x11, 0x7a, 0x4e, 0x68, 0xb3, 0x47, 0x5d, 0xad, 0xc9, 0x97,
	0xd5, 0xab, 0x9a, 0x63, 0x59, 0x8e, 0x2d, 0x96, 0x37, 0xfe, 0x28, 0xc0, 0xcd, 0x2f, 0x7d, 0xfb,
	0x11, 0x75, 0xce, 0x0d, 0x9d, 0xd0, 0xc3, 0x3e, 0xeb, 0x38, 0x7d, 0x5b, 0x47, 0x18, 0xca, 0x5e,
	0xbf, 0xe3, 0x69, 0xd4, 0xe8, 0x10, 0x59, 0x5a, 0x93, 0xd6, 0x2b, 0xdb, 0xdb, 0xcd, 0x39, 0xe0,
	0x4d, 0x0e, 0x75, 0x2c, 0xc2, 0x5c, 0x66, 0x38, 0x76, 0x2b, 0x83, 0x47, 0x30, 0xe8, 0x11, 0x54,
	0xfa, 0xf6, 0x08, 0x35, 0x7b, 0x09, 0xd4, 0x28, 0x10, 0xfa, 0x0c, 0xaa, 0x5d, 0xd3, 0x79, 0xaa,
	0x68, 0x8e, 0xcd, 0xa8, 0x63, 0xca, 0x39, 0x0e, 0xfc, 0xf2, 0x0c, 0xe0, 0x87, 0xa6, 0xf3, 0x74,
	0x4f, 0xac, 0xf6, 0xc1, 0xba, 0xa3, 0x9f, 0xe8, 0x04, 0xae, 0xf1, 0x6d, 0x15, 0x4a, 0x3c, 0xd7,
	0x8f, 0x92, 0xf3, 0x1c, 0xae, 0x79, 0xb1, 0x3c, 0x71, 0x10, 0xd5, 0xca, 0xe0, 0xda, 0x59, 0xd4,
	0x30, 0x02, 0xd6, 0x1c, 0xcb, 0x35, 0x09, 0x23, 0x72, 0x21, 0x0d, 0xf0, 0x5e, 0x10, 0x35, 0x04,
	0x0e, 0x0d, 0xe8, 0x07, 0xb8, 0xe3, 0x45, 0xaa, 0xa3, 0x8c, 0xa5, 0x5f, 0xe4, 0xbb, 0xec, 0xcc,
	0xdd, 0x25, 0x5a, 0xe1, 0xf1, 0x47, 0xb9, 0xed, 0x4d, 0x73, 0xa2, 0x8f, 0x20, 0xa7, 0x6a, 0xa7,
	0xf2, 0x12, 0xdf, 0xe5, 0xd5, 0x19, 0xbb, 0xb4, 0x6d, 0x8f, 0xd1, 0xbe, 0xe6, 0x23, 0x3c, 0xd0,
	0x4e, 0x5b, 0x19, 0xec, 0xc7, 0xa1, 0x97, 0xe0, 0x9a, 0x31, 0x72, 0x28, 0x86, 0x2e, 0x97, 0xd6,
	0xa4, 0xf5, 0x32, 0xae, 0x45, 0xac, 0x6d, 0x7d, 0xb7, 0x0c, 0x4b, 0x94, 0x9c, 0xf5, 0x89, 0xc7,
	0x1a, 0x7f, 0x66, 0xe1, 0x46, 0x8c, 0xb3, 0x6d, 0x5b, 0x50, 0x36, 0xc8, 0x44, 0x5a, 0x30, 0x93,
	0x7d, 0x28, 0xf0, 0x42, 0x04, 0xbc, 0xdc, 0xb8, 0xe8, 0x79, 0xf3, 0xac, 0x5a, 0x19, 0x2c, 0xa2,
	0xd1, 0x00, 0xea, 0x89, 0xa7, 0xc1, 0x97, 0x05, 0xd4, 0x7c, 0x7f, 0x91, 0xc3, 0x08, 0xf7, 0x91,
	0xbd, 0x29, 0xbe, 0x84, 0x5a, 0xe6, 0xe7, 0xd4, 0xf2, 0x00, 0x6a, 0x31, 0x72, 0xa1, 0x7b, 0x00,
	0x16, 0xf1, 0x3c, 0xb5, 0x47, 0xfc, 0x70, 0x89, 0x87, 0x97, 0x03, 0x4b, 0x5b, 0xf7, 0xdd, 0x41,
	0xa8, 0xef, 0xce, 0x0a, 0x77, 0x60, 0x69, 0xeb, 0x8d, 0x7f, 0xf2, 0x50, 0x8d, 0x65, 0xb4, 0x01,
	0x68, 0x04, 0x47, 0x6c, 0x66, 0x74, 0x0d, 0x42, 0x03, 0xd8, 0x95, 0x21, 0x6c, 0xe8, 0x40, 0x37,
	0xa2, 0x47, 0x50, 0x0e, 0x2b, 0x7a, 0x17, 0xca, 0xcc, 0xb0, 0x88, 0xc7, 0x54, 0xcb, 0xe5, 0x05,
	0xcc, 0xe1, 0x91, 0x01, 0xed, 0xc3, 0x92, 0xab, 0x0e, 0x4c, 0x47, 0xd5, 0x83, 0x46, 0x7d, 0x7d,
	0x46, 0x71, 0x8f, 0x09, 0x35, 0x54, 0xd3, 0x78, 0x4e, 0xf4, 0xc3, 0xce, 0x13, 0xa2, 0x31, 0x1c,
	0xc6, 0xa2, 0x6f, 0xa0, 0x6c, 0x11, 0xa6, 0x2a, 0xba, 0xca, 0x54, 0xb9, 0xb0, 0x96, 0x5b, 0xaf,
	0x6c, 0x7f, 0x90, 0x8a, 0x01, 0xcd, 0x03, 0xc2, 0xd4, 0x4f, 0x54, 0xa6, 0xee, 0xdb, 0x8c, 0x0e,
	0x70, 0xc9, 0x0a, 0x7e, 0xa2, 0x23, 0xa8, 0x85, 0xbd, 0xa8, 0xb0, 0x81, 0x1b, 0x36, 0x64, 0xaa,
	0x34, 0xab, 0x21, 0xc2, 0x57, 0x03, 0x97, 0x20, 0x03, 0x6e, 0xb9, 0xd4, 0xd1, 0x88, 0xe7, 0x19,
	0x76, 0x4f, 0x89, 0x1c, 0xae, 0x27, 0x2f, 0xf1, 0xcc, 0xb7, 0x66, 0x60, 0x1f, 0x0d, 0x23, 0x23,
	0x6d, 0x80, 0x57, 0xdd, 0x24, 0xb3, 0x87, 0xee, 0x40, 0x59, 0x33, 0x0d, 0x62, 0xb3, 0x51, 0x67,
	0x96, 0x84, 0xa1, 0xad, 0xfb, 0x7c, 0xf3, 0xb5, 0xcc, 0xb1, 0x7d, 0xbf, 0xad, 0x5a, 0x44, 0x2e,
	0x0b, 0xbe, 0x0d, 0xad, 0x5f, 0xa8, 0x16, 0xa9, 0x13, 0xa8, 0xc5, 0x6a, 0x83, 0x96, 0x21, 0x77,
	0x4a, 0x06, 0x01, 0x0d, 0xfc, 0x7f, 0xd1, 0xc7, 0x50, 0x38, 0x57, 0xcd, 0x7e, 0x78, 0x27, 0xac,
	0xcf, 0xc8, 0x3f, 0x84, 0x7a, 0xe4, 0xaf, 0xc7, 0x22, 0x6c, 0x27, 0xfb, 0x9e, 0xd4, 0xf8, 0x3b,
	0x1f, 0x90, 0x79, 0x28, 0x4d, 0x29, 0xd9, 0x77, 0x0f, 0x80, 0x50, 0xea, 0x50, 0x45, 0x73, 0x74,
	0x12, 0x92, 0x9b, 0x5b, 0xf6, 0x1c, 0x9d, 0xa0, 0xcf, 0xa1, 0x26, 0xdc, 0x41, 0x64, 0xd0, 0xcb,
	0xaf, 0xcc, 0xc8, 0x75, 0xdf, 0x5f, 0x7f, 0x20, 0x96, 0xe3, 0x2a, 0x89, 0xfc, 0xba, 0x2a, 0xda,
	0x3e, 0x9e, 0xa4, 0xed, 0x87, 0xe9, 0x2e, 0xaa, 0xa9, 0xbc, 0x9d, 0xc1, 0xb2, 0xe2, 0x15, 0xb3,
	0x6c, 0x03, 0xd0, 0x48, 0x56, 0x86, 0x07, 0xb5, 0x24, 0x0e, 0x6a, 0x28, 0x2f, 0xa1, 0xe3, 0x3f,
	0x22, 0xd4, 0xa7, 0xf9, 0xd2, 0xf5, 0xe5, 0xe5, 0xc6, 0xef, 0x59, 0x58, 0x99, 0x50, 0x63, 0xf4,
	0x2e, 0xdc, 0x8a, 0xa9, 0xfc, 0x04, 0xbf, 0x56, 0xa3, 0xee, 0x08, 0xc9, 0x5e, 0x83, 0x15, 0xbb,
	0x6f, 0x75, 0x08, 0x55, 0x9c, 0xae, 0xe2, 0x12, 0x6a, 0x19, 0xcc, 0xe3, 0x49, 0xe6, 0xf0, 0x75,
	0xe1, 0x38, 0xec, 0x1e, 0x09, 0x33, 0xc2, 0x50, 0x4b, 0xba, 0x3d, 0xd2, 0xdd, 0x4c, 0xb8, 0x7a,
	0x16, 0x55, 0xe4, 0xef, 0xe0, 0x46, 0xdf, 0xd5, 0x55, 0x46, 0x94, 0xb8, 0x28, 0x2d, 0x40, 0x42,
	0x24, 0x80, 0x70, 0x44, 0x9a, 0x1a, 0x3f, 0xe7, 0xa0, 0xc2, 0x77, 0xff, 0x9a, 0xfb, 0xa6, 0xb4,
	0x60, 0x76, 0x5a, 0x0b, 0x46, 0xba, 0x22, 0x77, 0x89, 0xae, 0x38, 0x89, 0x76, 0x45, 0x9e, 0x93,
	0x75, 0xe7, 0x62, 0x45, 0x13, 0x69, 0x4f, 0xed, 0x89, 0x98, 0x1c, 0x16, 0xe6, 0xca, 0x61, 0xf1,
	0x7f, 0x94, 0xc3, 0xc7, 0xf0, 0x42, 0xe4, 0x89, 0x86, 0x17, 0x7c, 0xec, 0x09, 0xb2, 0x73, 0x9f,
	0x20, 0x97, 0xf0, 0x04, 0x8d, 0xbf, 0x24, 0x58, 0x4b, 0xc0, 0xde, 0x7f, 0xa6, 0x11, 0x4e, 0x77,
	0xd5, 0x34, 0x07, 0x57, 0xb1, 0xd1, 0x98, 0x22, 0x17, 0xe6, 0x2a, 0x72, 0xf1, 0x12, 0x8a, 0xdc,
	0xf8, 0x2d, 0x07, 0xf2, 0xb4, 0xd7, 0xae, 0xc5, 0xc6, 0xa1, 0x09, 0xb4, 0x2b, 0x19, 0x87, 0x92,
	0x50, 0x63, 0xe3, 0x50, 0x07, 0x50, 0x8f, 0x30, 0xc5, 0xb0, 0x0d, 0x66, 0xa8, 0xa6, 0xdf, 0xe7,
	0x7d, 0x33, 0xd4, 0x8e, 0xc5, 0xe0, 0x97, 0x7b, 0x84, 0xb5, 0x05, 0x1c, 0xe6, 0x68, 0xe8, 0x64,
	0x6c, 0xe4, 0xca, 0x5f, 0x26, 0xf9, 0xc8, 0xf8, 0x15, 0x7d, 0x39, 0xfd, 0x31, 0x0f, 0xb7, 0xa7,
	0x0e, 0x25, 0x69, 0x2f, 0xf7, 0x19, 0x82, 0x9d, 0x9d, 0x29, 0xd8, 0x27, 0xfe, 0x4b, 0x75, 0x42,
	0x25, 0x17, 0x98, 0x07, 0x8d, 0x58, 0x09, 0x1f, 0x42, 0x51, 0x08, 0x68, 0x50, 0xbc, 0x37, 0xd2,
	0x28, 0x54, 0x2b, 0x83, 0x83, 0x68, 0x84, 0xa1, 0x34, 0x36, 0x51, 0xbe, 0x95, 0x06, 0x29, 0x32,
	0x57, 0x0e, 0x71, 0xd0, 0x73, 0x58, 0x0d, 0xff, 0x57, 0x48, 0xb4, 0xad, 0x83, 0x16, 0x7b, 0xb0,
	0xc8, 0x0e, 0x31, 0x7d, 0x68, 0x65, 0xf0, 0x4d, 0x2d, 0xc9, 0xb1, 0x0b, 0x50, 0x0a, 0xaf, 0x26,
	0x5f, 0x69, 0x56, 0x26, 0xc6, 0xff, 0x79, 0x43, 0x4a, 0xf2, 0x14, 0x71, 0x1f, 0x2a, 0xe2, 0xfc,
	0xa2, 0x7a, 0x03, 0xc2, 0xc4, 0xc5, 0x66, 0x52, 0x93, 0xf2, 0x49, 0x9a, 0x34, 0xf3, 0x0a, 0x78,
	0x11, 0xae, 0xd9, 0xfc, 0x66, 0xff, 0x5e, 0xb5, 0x75, 0x93, 0x50, 0x8f, 0xd7, 0xab, 0x80, 0xab,
	0x36, 0x3d, 0xec, 0xb6, 0x02, 0xdb, 0xf6, 0xaf, 0xb9, 0x60, 0x4c, 0x3a, 0x26, 0xf4, 0xdc, 0xd0,
	0x08, 0xfa, 0x49, 0x02, 0x38, 0x74, 0x89, 0x7d, 0xcc, 0x28, 0x51, 0x2d, 0xf4, 0xce, 0xc5, 0xaa,
	0x3b, 0xfe, 0xcd, 0xa6, 0xfe, 0x76, 0xba, 0xb8, 0x60, 0x6e, 0x6e, 0x64, 0xd6, 0xa5, 0x2d, 0x09,
	0x3d, 0x81, 0x82, 0x78, 0xb5, 0x49, 0xf7, 0x7a, 0x51, 0x4f, 0xd9, 0x07, 0x8d, 0xcc, 0x96, 0x84,
	0x7e, 0x91, 0xa0, 0x1a, 0x3b, 0xd1, 0xc5, 0x07, 0xe2, 0xfa, 0x25, 0x3e, 0x6c, 0x88, 0x27, 0xdf,
	0xbd, 0x7b, 0x24, 0x7d, 0x2b, 0x7b, 0x54, 0xdb, 0x74, 0x4f, 0x7b, 0x9b, 0x7e, 0xdc, 0xa6, 0x8f,
	0xa3, 0x08, 0xa0, 0x4e, 0x91, 0x7f, 0x29, 0x7b, 0xf3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74,
	0xba, 0x3e, 0x1b, 0x67, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Opens a Query- and Instruction stream to AxonServer.
	OpenStream(ctx context.Context, opts ...grpc.CallOption) (QueryService_OpenStreamClient, error)
	// Sends a point-to-point or scatter-gather Query
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (QueryService_QueryClient, error)
	// Opens a Subscription Query
	Subscription(ctx context.Context, opts ...grpc.CallOption) (QueryService_SubscriptionClient, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) OpenStream(ctx context.Context, opts ...grpc.CallOption) (QueryService_OpenStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QueryService_serviceDesc.Streams[0], "/io.axoniq.axonserver.grpc.query.QueryService/OpenStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceOpenStreamClient{stream}
	return x, nil
}

type QueryService_OpenStreamClient interface {
	Send(*QueryProviderOutbound) error
	Recv() (*QueryProviderInbound, error)
	grpc.ClientStream
}

type queryServiceOpenStreamClient struct {
	grpc.ClientStream
}

func (x *queryServiceOpenStreamClient) Send(m *QueryProviderOutbound) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queryServiceOpenStreamClient) Recv() (*QueryProviderInbound, error) {
	m := new(QueryProviderInbound)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (QueryService_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QueryService_serviceDesc.Streams[1], "/io.axoniq.axonserver.grpc.query.QueryService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_QueryClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type queryServiceQueryClient struct {
	grpc.ClientStream
}

func (x *queryServiceQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryServiceClient) Subscription(ctx context.Context, opts ...grpc.CallOption) (QueryService_SubscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QueryService_serviceDesc.Streams[2], "/io.axoniq.axonserver.grpc.query.QueryService/Subscription", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceSubscriptionClient{stream}
	return x, nil
}

type QueryService_SubscriptionClient interface {
	Send(*SubscriptionQueryRequest) error
	Recv() (*SubscriptionQueryResponse, error)
	grpc.ClientStream
}

type queryServiceSubscriptionClient struct {
	grpc.ClientStream
}

func (x *queryServiceSubscriptionClient) Send(m *SubscriptionQueryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queryServiceSubscriptionClient) Recv() (*SubscriptionQueryResponse, error) {
	m := new(SubscriptionQueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// Opens a Query- and Instruction stream to AxonServer.
	OpenStream(QueryService_OpenStreamServer) error
	// Sends a point-to-point or scatter-gather Query
	Query(*QueryRequest, QueryService_QueryServer) error
	// Opens a Subscription Query
	Subscription(QueryService_SubscriptionServer) error
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) OpenStream(srv QueryService_OpenStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (*UnimplementedQueryServiceServer) Query(req *QueryRequest, srv QueryService_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedQueryServiceServer) Subscription(srv QueryService_SubscriptionServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscription not implemented")
}

func RegisterQueryServiceServer(s *grpc.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_OpenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueryServiceServer).OpenStream(&queryServiceOpenStreamServer{stream})
}

type QueryService_OpenStreamServer interface {
	Send(*QueryProviderInbound) error
	Recv() (*QueryProviderOutbound, error)
	grpc.ServerStream
}

type queryServiceOpenStreamServer struct {
	grpc.ServerStream
}

func (x *queryServiceOpenStreamServer) Send(m *QueryProviderInbound) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queryServiceOpenStreamServer) Recv() (*QueryProviderOutbound, error) {
	m := new(QueryProviderOutbound)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _QueryService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).Query(m, &queryServiceQueryServer{stream})
}

type QueryService_QueryServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type queryServiceQueryServer struct {
	grpc.ServerStream
}

func (x *queryServiceQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryService_Subscription_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueryServiceServer).Subscription(&queryServiceSubscriptionServer{stream})
}

type QueryService_SubscriptionServer interface {
	Send(*SubscriptionQueryResponse) error
	Recv() (*SubscriptionQueryRequest, error)
	grpc.ServerStream
}

type queryServiceSubscriptionServer struct {
	grpc.ServerStream
}

func (x *queryServiceSubscriptionServer) Send(m *SubscriptionQueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queryServiceSubscriptionServer) Recv() (*SubscriptionQueryRequest, error) {
	m := new(SubscriptionQueryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.axoniq.axonserver.grpc.query.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenStream",
			Handler:       _QueryService_OpenStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Query",
			Handler:       _QueryService_Query_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscription",
			Handler:       _QueryService_Subscription_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "query.proto",
}
